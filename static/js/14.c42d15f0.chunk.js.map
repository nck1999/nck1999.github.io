{"version":3,"sources":["assets/back.svg","components/Header.tsx","utils/mediaStream.ts","components/MediaStream.tsx","assets/qrOverlay.svg","components/QRCodeReader.tsx","utils/vaccinationQRHelper.ts","utils/sign.ts","containers/VaccinationQRReader/index.tsx"],"names":["Header","name","backPath","Wrapper","to","BackButton","src","back","styled","img","div","mediaStreamErrorType","getMediaStream","cameraId","a","navigator","mediaDevices","getUserMedia","video","deviceId","facingMode","audio","console","error","Error","CAMERA_ACTIVATE_ERROR","GET_USER_MEDIA_NOT_FOUND","MediaStream","onFrame","suppressError","t","useTranslation","preferredCameraId","useCamera","useState","showUnSupportErrorModal","setShowUnSupportErrorModal","showCameraActivationErrorModal","setShowCameraActivationErrorModal","videoRef","useRef","canvasRef","useRafLoop","canvasElement","current","videoElement","readyState","HAVE_ENOUGH_DATA","canvas","getContext","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","loopStop","loopStart","initMediaStream","useCallback","undefined","stream","srcObject","play","message","useEffect","getTracks","forEach","track","stop","Video","ref","playsInline","Canvas","Dialog","open","keepMounted","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","isIOS","DialogActions","Button","color","QRCodeReader","onDecode","handleFrame","code","jsQR","data","schemaVersionType","ecdsaVerify","publicKey","digitalSignature","ECKey","createVerify","update","verify","qrDecode","input","splitData","split","log","length","parseResult","parseData","schemaVersion","stringToBeSigned","getPublicKey","validationPass","type","EVT1","EVT1_1","VAC2","VAC3","VAC4","parseQRCode1","prefix1","prefix2","formatVersion","refId","docType","iNum","specimenCollectionDate","specimenType","testingPlatform","testResult","reportDate","downloadDate","join","init","parseQRCode2","qrCodeVersion","keyVersion","vacRef","label1","firstDoseDate","firstVaccineName","firstVaccineNameTc","firstBrandName","firstBrandNameTc","secondDoseDate","secondVaccineName","secondVaccineNameTc","secondBrandName","secondBrandNameTc","startsWith","PageWrapper","VaccinationQRReader","result","setResult","handleScan","isEmpty","decodedJson","Message","VideoContainer","ResultOverlay","Overlay","qrOverlay"],"mappings":"8LAAe,MAA0B,iC,OCU5BA,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAC7B,OACE,eAACC,EAAD,WACGD,GACC,cAAC,IAAD,CAAME,GAAIF,EAAV,SACE,cAACG,EAAD,CAAYC,IAAKC,MAGpBN,MAKDI,EAAaG,IAAOC,IAAV,iGAOVN,EAAUK,IAAOE,IAAV,8L,uEC9BDC,E,mKAAAA,K,oDAAAA,E,+CAAAA,M,KAKL,I,IAAMC,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,2DACxB,iBAAkBC,WADM,mDAIjBA,UAAUC,aAAaC,aAAa,CACzCC,MAAOL,EACH,CAAEM,SAAUN,GACZ,CAAEO,WAAY,eAClBC,OAAO,KARe,sCAWxBC,QAAQC,MAAR,MACM,IAAIC,MAAMb,EAAqBc,uBAZb,qCAepB,IAAID,MAAMb,EAAqBe,0BAfX,yDAAH,sD,OCkBdC,EAAc,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,QAA4C,IAAnCC,qBAAmC,SAChEC,EAAMC,YAAe,aAArBD,EACAE,EAAsBC,cAAtBD,kBAFgE,EAGVE,oBAAS,GAHC,mBAGjEC,EAHiE,KAGxCC,EAHwC,OAOpEF,oBAAS,GAP2D,mBAKtEG,EALsE,KAMtEC,EANsE,KASlEC,EAAWC,iBAAyB,MACpCC,EAAYD,iBAA0B,MAV4B,EAY1CE,aAAW,WACvC,IAAMC,EAAgBF,EAAUG,QAC1BC,EAAeN,EAASK,QAE9B,GACED,GACAE,GACAA,EAAaC,aAAeD,EAAaE,iBACzC,CACA,IAAMC,EAASL,EAAcM,WAAW,MACxC,IAAKD,EAAQ,OAEbL,EAAcO,OAASL,EAAaM,YACpCR,EAAcS,MAAQP,EAAaQ,WACnCL,EAAOM,UACLT,EACA,EACA,EACAF,EAAcS,MACdT,EAAcO,QAGhB,IAAMK,EAAYP,EAAOQ,aACvB,EACA,EACAb,EAAcS,MACdT,EAAcO,QAGhBtB,GAAWA,EAAQ2B,OAEpB,GA3CqE,mBAYjEE,EAZiE,KAYvDC,EAZuD,KA6ClEC,EAAkBC,sBAAW,sBAAC,8BAAA9C,EAAA,yDAC5B+B,EAAeN,EAASK,QADI,0EAIXhC,EACG,SAAtBoB,OAA+B6B,EAAY7B,GALb,UAI1B8B,EAJ0B,wDAShCjB,EAAakB,UAAYD,EACzBjB,EAAamB,OACbN,IAXgC,uDAaxB,KAAEO,QAbsB,cAczBtD,EAAqBe,yBAdI,UAiBzBf,EAAqBc,sBAjBI,2BAe5BW,GAA2B,GAfC,iCAkBxBP,EAlBwB,0DAmB5BS,GAAkC,GAnBN,6BAsB5BhB,QAAQC,MAAR,MAtB4B,0DAyBjC,CAACmC,EAAW1B,EAAmBH,IAsBlC,OApBAqC,qBAAU,WACR,IAAMrB,EAAeN,EAASK,QAG9B,OAFAe,IAEO,WAEL,GADAF,IACIZ,EAAc,CAChB,IAAMiB,EAASjB,EAAakB,UAC5B,IAAKD,EAAQ,OACEA,EAAOK,YAEfC,SAAQ,SAACC,GACdA,EAAMC,UAGRzB,EAAakB,UAAY,SAG5B,CAACL,EAAWD,EAAUlB,EAAUoB,EAAiB3B,IAGlD,qCACE,cAACuC,EAAD,CAAOC,IAAKjC,EAAUkC,aAAW,IACjC,cAACC,EAAD,CAAQF,IAAK/B,IACb,eAACkC,EAAA,EAAD,CACEC,KAAMzC,EACN0C,aAAW,EACXC,kBAAgB,2BAChBC,mBAAiB,iCAJnB,UAME,cAACC,EAAA,EAAD,CAAaC,GAAG,2BAAhB,kDACA,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAmBF,GAAG,iCAAtB,UACGnD,EAAE,yCACFsD,SAAS,mCAAGtD,EAAE,oCAGnB,cAACuD,EAAA,EAAD,UACE,cAAC,IAAD,CAAMjF,GAAG,IAAT,SACE,cAACkF,EAAA,EAAD,CAAQC,MAAM,UAAd,SAAyBzD,EAAE,6BAIjC,eAAC6C,EAAA,EAAD,CACEC,KAAMvC,EACNwC,aAAW,EACXC,kBAAgB,0BAChBC,mBAAiB,gCAJnB,UAME,cAACC,EAAA,EAAD,CAAaC,GAAG,0BAAhB,SACGnD,EAAE,qCAEL,cAACoD,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmBF,GAAG,gCAAtB,SACGnD,EAAE,yCAGP,eAACuD,EAAA,EAAD,WACE,cAAC,IAAD,CAAMjF,GAAG,IAAT,SACE,cAACkF,EAAA,EAAD,CAAQC,MAAM,UAAd,SAAyBzD,EAAE,wBAE7B,cAAC,IAAD,CAAM1B,GAAG,iBAAT,SACE,cAACkF,EAAA,EAAD,CAAQC,MAAM,UAAd,SAAyBzD,EAAE,uCAQjCyC,EAAQ/D,IAAOU,MAAV,kXAgBLwD,EAASlE,IAAOwC,OAAV,+C,iCCrLG,QAA0B,uC,iCCAzC,+EASawC,EAAe,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACvBC,EAAc9B,uBAClB,SAACL,GACC,IAAMoC,EAAOC,IAAKrC,EAAUsC,KAAMtC,EAAUH,MAAOG,EAAUL,QAC7DyC,GAAQF,EAASE,KAEnB,CAACF,IAGH,OAAO,cAAC,IAAD,CAAa7D,QAAS8D,M,4CCV1BI,E,2KCNQC,EAAc,SACzBF,EACAG,EACAC,GAHyB,OAKzB,IAAIC,IAAMF,EAAW,QAClBG,aAAa,UACbC,OAAOP,GACPQ,OAAOJ,EAAkB,Y,SDFzBH,K,kBAAAA,E,YAAAA,E,gBAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,KASE,I,UAAMQ,EAAQ,uCAAG,WAAOC,GAAP,2BAAAzF,EAAA,kEAEd0F,EAAYC,YAAM,IAAKF,GAC7BjF,QAAQoF,IAAI,SAAUF,KAGlBA,EAAUG,OAAS,GANH,yCAMa,MANb,UAQdC,EAAcC,EAAUL,GAC9BlF,QAAQoF,IAAI,eAAgB,gBAAiBE,GACxCA,EAVe,yCAUK,MAVL,cAWZE,EAAsDF,EAAtDE,cAAeb,EAAuCW,EAAvCX,iBAAkBc,EAAqBH,EAArBG,iBAEnCf,EAAYgB,EAAaF,IAAkBb,EAEjD3E,QAAQoF,IAAI,eAAgB,qBAAuBT,GACnD3E,QAAQoF,IAAI,eAAgB,qBAAuBK,GACnDzF,QAAQoF,IAAI,eAAgB,cAAgBV,GAjBxB,UAmBSD,EAC3BgB,EACAf,EACAC,GAtBkB,WAmBdgB,EAnBc,OAwBpB3F,QAAQoF,IAAI,eAAgB,mBAAqBO,GAC5CA,EAzBe,0CAyBQ,MAzBR,iCA2BbL,GA3Ba,yCA6BpBtF,QAAQoF,IAAR,MA7BoB,kBA8Bb,MA9Ba,0DAAH,sDAkCfM,EAAe,SAACE,GACpB,OAAQA,GACN,KAAKpB,EAAkBqB,KACvB,KAAKrB,EAAkBsB,OACvB,KAAKtB,EAAkBuB,KACrB,MAAO,+HACT,KAAKvB,EAAkBwB,KACrB,MAAO,+HACT,KAAKxB,EAAkByB,KACrB,MAAO,+HACT,QACE,OAAO,OAIPC,EAAe,SAACN,EAAyBX,GAAqB,IAAD,cAa7DA,EAb6D,IAejE,MAAO,CACLkB,QAhB+D,KAiB/DC,QAjB+D,KAkB/DC,cAlB+D,KAmB/DC,MAnB+D,KAoB/DC,QApB+D,KAqB/DC,KArB+D,KAsB/DC,uBAtB+D,KAuB/DC,aAvB+D,KAwB/DC,gBAxB+D,KAyB/DC,WAzB+D,KA0B/DC,WA1B+D,MA2B/DC,aAAclB,IAASpB,EAAkBqB,KAAO,KAAOZ,EAAM,IAC7DN,iBAAkBiB,IAASpB,EAAkBqB,KAAOZ,EAAM,IAAMA,EAAM,IACtEQ,iBAAkBsB,YAAK,IAAKC,YAAK/B,IAAU,IAC3CO,cAAeI,IAIbqB,EAAe,SAACrB,EAAyBX,GAAqB,IAAD,cAqB7DA,EArB6D,IAuBjE,MAAO,CACLkB,QAxB+D,KAyB/DC,QAzB+D,KA0B/Dc,cA1B+D,KA2B/DC,WA3B+D,KA4B/DC,OA5B+D,KA6B/DZ,KA7B+D,KA8B/Da,OA9B+D,KA+B/DC,cA/B+D,KAgC/DC,iBAhC+D,KAiC/DC,mBAjC+D,KAkC/DC,eAlC+D,MAmC/DC,iBAnC+D,MAoC/DC,eApC+D,MAqC/DC,kBArC+D,MAsC/DC,oBAtC+D,MAuC/DC,gBAvC+D,MAwC/DC,kBAxC+D,MAyC/DjB,aAzC+D,MA0C/DnC,iBA1C+D,MA2C/Dc,iBAAkBsB,YAAK,IAAKC,YAAK/B,IAAU,IAC3CO,cAAeI,IAIbL,EAAY,SAACN,GACjB,MAAiB,QAAbA,EAAM,IAAiC,KAAjBA,EAAMI,OACvBa,EAAa1B,EAAkBqB,KAAMZ,GACtB,QAAbA,EAAM,IAAiC,KAAjBA,EAAMI,OAC9Ba,EAAa1B,EAAkBsB,OAAQb,GACxB,QAAbA,EAAM,IAAgB+C,YAAW,IAAK/C,EAAM,IAC9CgC,EAAazC,EAAkBuB,KAAMd,GACtB,QAAbA,EAAM,IAAgB+C,YAAW,IAAK/C,EAAM,IAC9CgC,EAAazC,EAAkBwB,KAAMf,GACtB,QAAbA,EAAM,IAAiB+C,YAAW,IAAK/C,EAAM,IAI/CgC,EAAazC,EAAkByB,KAAMhB,GAFrC,M,OEnHLgD,GAFSC,UA9Ba,WAAO,IACzB1H,EAAMC,YAAe,yBAArBD,EADwB,EAEJI,mBAA6B,MAFzB,mBAEzBuH,EAFyB,KAEjBC,EAFiB,KAI1BC,EAAU,uCAAG,+BAAA7I,EAAA,0DAAS+E,EAAT,EAASA,QACb+D,YAAQ/D,GADJ,iEAESS,EAAST,GAFlB,UAEXgE,EAFW,wDAKjBvI,QAAQoF,IAAIb,EAAMgE,GAClBH,EAAUG,GANO,4CAAH,sDAShB,OACE,eAACN,EAAD,WACE,cAACvJ,EAAA,EAAD,CAAQE,SAAS,IAAID,KAAM6B,EAAE,UAC7B,cAACgI,EAAD,UAAUhI,EAAE,0BACZ,eAACiI,EAAD,WACGN,GACC,cAACO,EAAD,UACE,cAAC,IAAD,CAAW1J,IAAKmJ,MAGpB,cAACQ,EAAD,IACA,cAACzE,EAAA,EAAD,CAAcC,SAAUkE,WAQZnJ,IAAOE,IAAV,2JAQXqJ,EAAiBvJ,IAAOE,IAAV,yGAOduJ,EAAUzJ,IAAOE,IAAV,8SAEcwJ,KAcrBJ,EAAUtJ,IAAOE,IAAV,iKAUPsJ,EAAgBxJ,IAAOE,IAAV","file":"static/js/14.c42d15f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.7bf7a56f.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport back from \"../assets/back.svg\";\n\ntype Props = {\n  name: string;\n  backPath?: string;\n};\n\nexport const Header = ({ name, backPath }: Props) => {\n  return (\n    <Wrapper>\n      {backPath && (\n        <Link to={backPath}>\n          <BackButton src={back} />\n        </Link>\n      )}\n      {name}\n    </Wrapper>\n  );\n};\n\nconst BackButton = styled.img`\n  height: 20px;\n  top: 14px;\n  left: 16px;\n  position: absolute;\n`;\n\nconst Wrapper = styled.div`\n  color: #ffffff;\n  background-color: #12b188;\n  text-align: center;\n  line-height: 48px;\n  text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.8);\n  flex-shrink: 0;\n`;\n","export enum mediaStreamErrorType {\n  GET_USER_MEDIA_NOT_FOUND = \"GET_USER_MEDIA_NOT_FOUND\",\n  CAMERA_ACTIVATE_ERROR = \"CAMERA_ACTIVATE_ERROR\",\n}\n\nexport const getMediaStream = async (cameraId?: string) => {\n  if (\"mediaDevices\" in navigator) {\n    try {\n      // WebRTC adapter will polyfill this\n      return navigator.mediaDevices.getUserMedia({\n        video: cameraId\n          ? { deviceId: cameraId }\n          : { facingMode: \"environment\" },\n        audio: false,\n      });\n    } catch (e) {\n      console.error(e);\n      throw new Error(mediaStreamErrorType.CAMERA_ACTIVATE_ERROR);\n    }\n  } else {\n    throw new Error(mediaStreamErrorType.GET_USER_MEDIA_NOT_FOUND);\n  }\n};\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { isIOS } from \"react-device-detect\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useRafLoop } from \"react-use\";\nimport styled from \"styled-components\";\n\nimport { useCamera } from \"../hooks/useCamera\";\nimport { getMediaStream, mediaStreamErrorType } from \"../utils/mediaStream\";\n\ntype Props = {\n  onFrame?: (imageData: ImageData) => void;\n  suppressError?: boolean;\n};\n\nexport const MediaStream = ({ onFrame, suppressError = false }: Props) => {\n  const { t } = useTranslation(\"qr_reader\");\n  const { preferredCameraId } = useCamera();\n  const [showUnSupportErrorModal, setShowUnSupportErrorModal] = useState(false);\n  const [\n    showCameraActivationErrorModal,\n    setShowCameraActivationErrorModal,\n  ] = useState(false);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [loopStop, loopStart] = useRafLoop(() => {\n    const canvasElement = canvasRef.current;\n    const videoElement = videoRef.current;\n\n    if (\n      canvasElement &&\n      videoElement &&\n      videoElement.readyState === videoElement.HAVE_ENOUGH_DATA\n    ) {\n      const canvas = canvasElement.getContext(\"2d\");\n      if (!canvas) return;\n\n      canvasElement.height = videoElement.videoHeight;\n      canvasElement.width = videoElement.videoWidth;\n      canvas.drawImage(\n        videoElement,\n        0,\n        0,\n        canvasElement.width,\n        canvasElement.height\n      );\n\n      const imageData = canvas.getImageData(\n        0,\n        0,\n        canvasElement.width,\n        canvasElement.height\n      );\n\n      onFrame && onFrame(imageData);\n    }\n  }, false);\n\n  const initMediaStream = useCallback(async () => {\n    const videoElement = videoRef.current;\n    if (!videoElement) return;\n    try {\n      const stream = await getMediaStream(\n        preferredCameraId === \"AUTO\" ? undefined : preferredCameraId\n      );\n\n      if (!stream) return;\n      videoElement.srcObject = stream;\n      videoElement.play();\n      loopStart();\n    } catch (e) {\n      switch (e.message) {\n        case mediaStreamErrorType.GET_USER_MEDIA_NOT_FOUND:\n          setShowUnSupportErrorModal(true);\n          break;\n        case mediaStreamErrorType.CAMERA_ACTIVATE_ERROR:\n          if (suppressError) return;\n          setShowCameraActivationErrorModal(true);\n          break;\n        default:\n          console.error(e);\n      }\n    }\n  }, [loopStart, preferredCameraId, suppressError]);\n\n  useEffect(() => {\n    const videoElement = videoRef.current;\n    initMediaStream();\n\n    return () => {\n      loopStop();\n      if (videoElement) {\n        const stream = videoElement.srcObject as MediaStream | null;\n        if (!stream) return;\n        const tracks = stream.getTracks();\n\n        tracks.forEach((track) => {\n          track.stop();\n        });\n\n        videoElement.srcObject = null;\n      }\n    };\n  }, [loopStart, loopStop, videoRef, initMediaStream, preferredCameraId]);\n\n  return (\n    <>\n      <Video ref={videoRef} playsInline />\n      <Canvas ref={canvasRef} />\n      <Dialog\n        open={showUnSupportErrorModal}\n        keepMounted\n        aria-labelledby=\"unsupported-device-title\"\n        aria-describedby=\"unsupported-device-description\"\n      >\n        <DialogTitle id=\"unsupported-device-title\">不支援的裝置</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"unsupported-device-description\">\n            {t(\"message.doesnt_support_get_user_media\")}\n            {isIOS && <>{t(\"message.sure_above_ios_14\")}</>}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Link to=\"/\">\n            <Button color=\"primary\">{t(\"button.back_home\")}</Button>\n          </Link>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n        open={showCameraActivationErrorModal}\n        keepMounted\n        aria-labelledby=\"camera-activation-title\"\n        aria-describedby=\"camera-activation-description\"\n      >\n        <DialogTitle id=\"camera-activation-title\">\n          {t(\"dialog.cannot_open_camera.title\")}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"camera-activation-description\">\n            {t(\"dialog.cannot_open_camera.content\")}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Link to=\"/\">\n            <Button color=\"primary\">{t(\"button.back_home\")}</Button>\n          </Link>\n          <Link to=\"/cameraSetting\">\n            <Button color=\"primary\">{t(\"button.camera_setting\")}</Button>\n          </Link>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nconst Video = styled.video`\n  /* Make video to at least 100% wide and tall */\n  min-width: 100%;\n  min-height: 100%;\n\n  /* Setting width & height to auto prevents the browser from stretching or squishing the video */\n  width: auto;\n  height: auto;\n\n  /* Center the video */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst Canvas = styled.canvas`\n  display: none;\n`;\n","export default __webpack_public_path__ + \"static/media/qrOverlay.185cc3ea.svg\";","import jsQR, { QRCode } from \"jsqr\";\nimport { useCallback } from \"react\";\n\nimport { MediaStream } from \"./MediaStream\";\n\ntype Props = {\n  onDecode: (code: QRCode) => void;\n};\n\nexport const QRCodeReader = ({ onDecode }: Props) => {\n  const handleFrame = useCallback(\n    (imageData: ImageData) => {\n      const code = jsQR(imageData.data, imageData.width, imageData.height);\n      code && onDecode(code);\n    },\n    [onDecode]\n  );\n\n  return <MediaStream onFrame={handleFrame} />;\n};\n","import { init, join, split, startsWith } from \"ramda\";\n\nimport { ecdsaVerify } from \"./sign\";\n\nexport type DecodedJSON =\n  | ReturnType<typeof parseQRCode1>\n  | ReturnType<typeof parseQRCode2>;\n\nenum schemaVersionType {\n  UNKNOWN = \"UNKNOWN\",\n  EVT1 = \"EVT1\", // Test Result\n  EVT1_1 = \"EVT1_1\", // Test Result\n  VAC2 = \"VAC2\", // Vaccination Result\n  VAC3 = \"VAC3\", // Vaccination Result\n  VAC4 = \"VAC4\", // Vaccination Result\n}\n\nexport const qrDecode = async (input: string): Promise<DecodedJSON | null> => {\n  try {\n    const splitData = split(\"|\", input);\n    console.log(\"input:\", splitData);\n\n    // Invalid QR Code length\n    if (splitData.length < 3) return null;\n\n    const parseResult = parseData(splitData);\n    console.log(\"CODE_SCANNER\", \"parseResult: \", parseResult);\n    if (!parseResult) return null;\n    const { schemaVersion, digitalSignature, stringToBeSigned } = parseResult;\n\n    const publicKey = getPublicKey(schemaVersion) || digitalSignature;\n\n    console.log(\"CODE_SCANNER\", \"digitalSignature: \" + digitalSignature);\n    console.log(\"CODE_SCANNER\", \"stringToBeSigned: \" + stringToBeSigned);\n    console.log(\"CODE_SCANNER\", \"publicKey: \" + publicKey);\n\n    const validationPass = await ecdsaVerify(\n      stringToBeSigned,\n      publicKey,\n      digitalSignature\n    );\n    console.log(\"CODE_SCANNER\", \"validationPass: \" + validationPass);\n    if (!validationPass) return null;\n\n    return parseResult;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nconst getPublicKey = (type: schemaVersionType) => {\n  switch (type) {\n    case schemaVersionType.EVT1:\n    case schemaVersionType.EVT1_1:\n    case schemaVersionType.VAC2:\n      return \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErPNELrvyZHvKtCcwIjBRsWItljAosuGsBEG+AjNY0PztjCQffvGm/b38JvXsccFa1s3JVN9id2dXFqxjJ9OtTQ==\";\n    case schemaVersionType.VAC3:\n      return \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEOBxm8jQVg9VN5yGUj7bkvsor73k4r1AvNs2EoXiDYVVQCChFkDKhASMIaqMSbf5H73ub8WT3A+3mn/mnZPqbtQ==\";\n    case schemaVersionType.VAC4:\n      return \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErO8N4+4Z18Fj2Qeo/w90ybG79YaZzY5AJlOIUn7TtVXuNNTo85f5ofhk5saORUPtrijnENgyxoBkzJyL9UXadQ==\";\n    default:\n      return null;\n  }\n};\n\nconst parseQRCode1 = (type: schemaVersionType, input: string[]) => {\n  const [\n    prefix1,\n    prefix2,\n    formatVersion,\n    refId,\n    docType,\n    iNum,\n    specimenCollectionDate,\n    specimenType,\n    testingPlatform,\n    testResult,\n    reportDate,\n  ] = input;\n\n  return {\n    prefix1,\n    prefix2,\n    formatVersion,\n    refId,\n    docType,\n    iNum,\n    specimenCollectionDate,\n    specimenType,\n    testingPlatform,\n    testResult,\n    reportDate,\n    downloadDate: type === schemaVersionType.EVT1 ? null : input[11],\n    digitalSignature: type === schemaVersionType.EVT1 ? input[11] : input[12],\n    stringToBeSigned: join(\"|\", init(input)) + \"|\",\n    schemaVersion: type,\n  };\n};\n\nconst parseQRCode2 = (type: schemaVersionType, input: string[]) => {\n  const [\n    prefix1,\n    prefix2,\n    qrCodeVersion,\n    keyVersion,\n    vacRef,\n    iNum,\n    label1,\n    firstDoseDate,\n    firstVaccineName,\n    firstVaccineNameTc,\n    firstBrandName,\n    firstBrandNameTc,\n    secondDoseDate,\n    secondVaccineName,\n    secondVaccineNameTc,\n    secondBrandName,\n    secondBrandNameTc,\n    downloadDate,\n    digitalSignature,\n  ] = input;\n\n  return {\n    prefix1,\n    prefix2,\n    qrCodeVersion,\n    keyVersion,\n    vacRef,\n    iNum,\n    label1,\n    firstDoseDate,\n    firstVaccineName,\n    firstVaccineNameTc,\n    firstBrandName,\n    firstBrandNameTc,\n    secondDoseDate,\n    secondVaccineName,\n    secondVaccineNameTc,\n    secondBrandName,\n    secondBrandNameTc,\n    downloadDate,\n    digitalSignature,\n    stringToBeSigned: join(\"|\", init(input)) + \"|\",\n    schemaVersion: type,\n  };\n};\n\nconst parseData = (input: string[]) => {\n  if (input[1] === \"EVT\" && input.length === 12) {\n    return parseQRCode1(schemaVersionType.EVT1, input);\n  } else if (input[1] === \"EVT\" && input.length === 13) {\n    return parseQRCode1(schemaVersionType.EVT1_1, input);\n  } else if (input[1] === \"VAC\" && startsWith(\"2\", input[2])) {\n    return parseQRCode2(schemaVersionType.VAC2, input);\n  } else if (input[1] === \"VAC\" && startsWith(\"3\", input[2])) {\n    return parseQRCode2(schemaVersionType.VAC3, input);\n  } else if (input[1] !== \"VAC\" || !startsWith(\"4\", input[2])) {\n    // Invalid QR Code prefix2\n    return null;\n  } else {\n    return parseQRCode2(schemaVersionType.VAC4, input);\n  }\n};\n","import ECKey from \"ec-key\";\n\nexport const ecdsaVerify = (\n  data: string,\n  publicKey: string,\n  digitalSignature: string\n) =>\n  new ECKey(publicKey, \"spki\")\n    .createVerify(\"SHA256\")\n    .update(data)\n    .verify(digitalSignature, \"base64\");\n","import { QRCode } from \"jsqr\";\nimport { isEmpty } from \"ramda\";\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport ReactJson from \"react-json-view\";\nimport styled from \"styled-components\";\n\nimport qrOverlay from \"../../assets/qrOverlay.svg\";\nimport { Header } from \"../../components/Header\";\nimport { QRCodeReader } from \"../../components/QRCodeReader\";\nimport { DecodedJSON, qrDecode } from \"../../utils/vaccinationQRHelper\";\n\nconst VaccinationQRReader = () => {\n  const { t } = useTranslation(\"vaccination_qr_reader\");\n  const [result, setResult] = useState<DecodedJSON | null>(null);\n\n  const handleScan = async ({ data }: QRCode) => {\n    if (!data || isEmpty(data)) return;\n    const decodedJson = await qrDecode(data);\n    if (!decodedJson) return;\n\n    console.log(data, decodedJson);\n    setResult(decodedJson);\n  };\n\n  return (\n    <PageWrapper>\n      <Header backPath=\"/\" name={t(\"name\")} />\n      <Message>{t(\"message.scan_qr_code\")}</Message>\n      <VideoContainer>\n        {result && (\n          <ResultOverlay>\n            <ReactJson src={result} />\n          </ResultOverlay>\n        )}\n        <Overlay />\n        <QRCodeReader onDecode={handleScan} />\n      </VideoContainer>\n    </PageWrapper>\n  );\n};\n\nexport default VaccinationQRReader;\n\nconst PageWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.8);\n  display: flex;\n  flex-direction: column;\n`;\n\nconst VideoContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst Overlay = styled.div`\n  /* The image used */\n  background-image: url(\"${qrOverlay}\");\n\n  /* Full height */\n  height: 100%;\n\n  /* Center and scale the image nicely */\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n\n  z-index: 50;\n  position: relative;\n`;\n\nconst Message = styled.div`\n  position: absolute;\n  z-index: 51;\n  bottom: 20%;\n  width: 100%;\n  text-align: center;\n  color: #ffffff;\n  font-size: 16px;\n`;\n\nconst ResultOverlay = styled.div`\n  background-color: #ffffff;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  z-index: 100;\n  text-shadow: unset;\n`;\n"],"sourceRoot":""}